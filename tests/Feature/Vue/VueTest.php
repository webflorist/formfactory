<?php

namespace FormFactoryTests\Feature\Vue;

use FormFactoryTests\Browser\Requests\VueFormTestRequest;
use FormFactoryTests\TestCase;

class VueTest extends TestCase
{
    protected $openForm = false;
    protected $closeForm = false;
    protected $vueEnabled = true;

    public function test_manual_vue_app_generation()
    {
        \Form::vOpen('myFormId')->generate();

        \Form::text('text')->generate();

        \Form::close();

        $vue = \Form::vueInstance('myFormId')->generate();

        $this->assertEquals(
            'newVue({"el":"#myFormId","methods":{"fieldHasError":function(fieldName){returnthis.fields[fieldName].errors.length>0;},"fieldHasValue":function(fieldName){returnthis.fields[fieldName].value?true:false;},"submitForm":function(){if(this.isSubmitting==false){this.isSubmitting=true;this.clearErrors();this.successMessage="";axios.post(this.$el.getAttribute("action"),newFormData(this.$el)).then((response)=>{if(response.data.redirect){this.redirect(response.data.redirect["url"],response.data.redirect["delay"]);}if(response.data.message){this.displaySuccessMessage(response.data.message);}if(response.data.reset_form){this.resetForm();}this.finishSubmit(response);}).catch((error)=>{this.handleFieldErrors(error,"submitForm");this.finishSubmit(error.response);});}},"handleFieldErrors":function(error,callingMethod){if(error.response.status==422||error.response.status==429){for(letfieldNameinerror.response.data.errors){if(typeofthis.fields[fieldName]==="undefined"){this.generalErrors=this.generalErrors.concat(error.response.data.errors[fieldName]);}else{this.fields[fieldName].errors=error.response.data.errors[fieldName];}}}elseif(error.response.status==419){this.finishSubmit(error.response);axios.get("/api/form-factory/csrf-token").then((response)=>{axios.defaults.headers.common["X-CSRF-TOKEN"]=response.data;this[callingMethod]();}).catch((error)=>{this.generalErrors=[this.lang["form_expired_error"]];});}else{this.generalErrors=[this.lang["general_form_error"]];}},"clearErrors":function(){for(letfieldNameinthis.fields){this.fields[fieldName].errors=[];}this.generalErrors=[];},"resetForm":function(){for(letfieldNameinthis.fields){this.fields[fieldName].value="";}this.clearErrors();},"redirect":asyncfunction(url,delay){awaitnewPromise(resolve=>setTimeout(resolve,delay));window.location=url;},"finishSubmit":function(response){this.isSubmitting=false;if(response.data.captcha_question){this.captchaQuestion=response.data.captcha_question;}//Scrolltofirstalert(error-message,succes,etc.)this.$nextTick().then(()=>{letfirstAlert=this.$el.querySelector("[role=alert]");if(firstAlert!==null){$("html").animate({scrollTop:$(firstAlert).offset().top-150},"300");}});},"displaySuccessMessage":function(message){this.successMessage=message;},"handleFileInputChange":function(fieldName,event){varfiles=event.target.files||event.dataTransfer.files;if(files){if(files[0].type.match(/^image\/(gif|png|jpeg|svg\+xml)$/)||files[0].name.match(/\.(gif|png|jpe?g|svg)$/i)){varreader=newFileReader();reader.onload=e=>this.fields[fieldName].value=e.target.result;reader.readAsDataURL(files[0]);}else{this.fields[fieldName].value=files[0].name;}}}},"data":{"lang":{"general_form_error":"Theformcouldnotbesubmittedsuccessfully.Pleasetryagainlater.","form_expired_error":"Theformhasexpired.Pleasereloadthepage."},"isSubmitting":false,"generalErrors":[],"successMessage":[],"captchaQuestion":null}});',
            str_replace(["\n","\r"," "], '', $vue)
        );
    }

    public function test_automatic_vue_app_generation()
    {
        \Form::vOpen('myAutoVueForm1')->generate();
        \Form::text('myAutoVueForm1Text')->generate();
        \Form::close();

        \Form::open('myNonVueForm')->generate();
        \Form::text('myNonVueFormText')->generate();
        \Form::close();

        \Form::vOpen('myManualVueForm')->generate();
        \Form::text('myManualVueFormText')->generate();
        \Form::close();
        \Form::vueInstance('myManualVueForm')->generate();

        \Form::vOpen('myAutoVueForm2')->generate();
        \Form::text('myAutoVueForm2Text')->generate();
        \Form::close();

        $vue = \Form::generateVueInstances();

        $this->assertEquals(
            'newVue({"el":"#myAutoVueForm1","methods":{"fieldHasError":function(fieldName){returnthis.fields[fieldName].errors.length>0;},"fieldHasValue":function(fieldName){returnthis.fields[fieldName].value?true:false;},"submitForm":function(){if(this.isSubmitting==false){this.isSubmitting=true;this.clearErrors();this.successMessage="";axios.post(this.$el.getAttribute("action"),newFormData(this.$el)).then((response)=>{if(response.data.redirect){this.redirect(response.data.redirect["url"],response.data.redirect["delay"]);}if(response.data.message){this.displaySuccessMessage(response.data.message);}if(response.data.reset_form){this.resetForm();}this.finishSubmit(response);}).catch((error)=>{this.handleFieldErrors(error,"submitForm");this.finishSubmit(error.response);});}},"handleFieldErrors":function(error,callingMethod){if(error.response.status==422||error.response.status==429){for(letfieldNameinerror.response.data.errors){if(typeofthis.fields[fieldName]==="undefined"){this.generalErrors=this.generalErrors.concat(error.response.data.errors[fieldName]);}else{this.fields[fieldName].errors=error.response.data.errors[fieldName];}}}elseif(error.response.status==419){this.finishSubmit(error.response);axios.get("/api/form-factory/csrf-token").then((response)=>{axios.defaults.headers.common["X-CSRF-TOKEN"]=response.data;this[callingMethod]();}).catch((error)=>{this.generalErrors=[this.lang["form_expired_error"]];});}else{this.generalErrors=[this.lang["general_form_error"]];}},"clearErrors":function(){for(letfieldNameinthis.fields){this.fields[fieldName].errors=[];}this.generalErrors=[];},"resetForm":function(){for(letfieldNameinthis.fields){this.fields[fieldName].value="";}this.clearErrors();},"redirect":asyncfunction(url,delay){awaitnewPromise(resolve=>setTimeout(resolve,delay));window.location=url;},"finishSubmit":function(response){this.isSubmitting=false;if(response.data.captcha_question){this.captchaQuestion=response.data.captcha_question;}//Scrolltofirstalert(error-message,succes,etc.)this.$nextTick().then(()=>{letfirstAlert=this.$el.querySelector("[role=alert]");if(firstAlert!==null){$("html").animate({scrollTop:$(firstAlert).offset().top-150},"300");}});},"displaySuccessMessage":function(message){this.successMessage=message;},"handleFileInputChange":function(fieldName,event){varfiles=event.target.files||event.dataTransfer.files;if(files){if(files[0].type.match(/^image\/(gif|png|jpeg|svg\+xml)$/)||files[0].name.match(/\.(gif|png|jpe?g|svg)$/i)){varreader=newFileReader();reader.onload=e=>this.fields[fieldName].value=e.target.result;reader.readAsDataURL(files[0]);}else{this.fields[fieldName].value=files[0].name;}}}},"data":{"lang":{"general_form_error":"Theformcouldnotbesubmittedsuccessfully.Pleasetryagainlater.","form_expired_error":"Theformhasexpired.Pleasereloadthepage."},"isSubmitting":false,"generalErrors":[],"successMessage":[],"captchaQuestion":null,"fields":{"_token":{"value":"","isRequired":false,"isDisabled":false,"errors":[]},"_formID":{"value":"myAutoVueForm1","isRequired":false,"isDisabled":false,"errors":[]},"myAutoVueForm1Text":{"value":null,"isRequired":false,"isDisabled":false,"errors":[]}}},"computed":{"hasErrors":function(){returnthis.fields[\'_token\'].errors.length>0||this.fields[\'_formID\'].errors.length>0||this.fields[\'myAutoVueForm1Text\'].errors.length>0;}}});newVue({"el":"#myManualVueForm","methods":{"fieldHasError":function(fieldName){returnthis.fields[fieldName].errors.length>0;},"fieldHasValue":function(fieldName){returnthis.fields[fieldName].value?true:false;},"submitForm":function(){if(this.isSubmitting==false){this.isSubmitting=true;this.clearErrors();this.successMessage="";axios.post(this.$el.getAttribute("action"),newFormData(this.$el)).then((response)=>{if(response.data.redirect){this.redirect(response.data.redirect["url"],response.data.redirect["delay"]);}if(response.data.message){this.displaySuccessMessage(response.data.message);}if(response.data.reset_form){this.resetForm();}this.finishSubmit(response);}).catch((error)=>{this.handleFieldErrors(error,"submitForm");this.finishSubmit(error.response);});}},"handleFieldErrors":function(error,callingMethod){if(error.response.status==422||error.response.status==429){for(letfieldNameinerror.response.data.errors){if(typeofthis.fields[fieldName]==="undefined"){this.generalErrors=this.generalErrors.concat(error.response.data.errors[fieldName]);}else{this.fields[fieldName].errors=error.response.data.errors[fieldName];}}}elseif(error.response.status==419){this.finishSubmit(error.response);axios.get("/api/form-factory/csrf-token").then((response)=>{axios.defaults.headers.common["X-CSRF-TOKEN"]=response.data;this[callingMethod]();}).catch((error)=>{this.generalErrors=[this.lang["form_expired_error"]];});}else{this.generalErrors=[this.lang["general_form_error"]];}},"clearErrors":function(){for(letfieldNameinthis.fields){this.fields[fieldName].errors=[];}this.generalErrors=[];},"resetForm":function(){for(letfieldNameinthis.fields){this.fields[fieldName].value="";}this.clearErrors();},"redirect":asyncfunction(url,delay){awaitnewPromise(resolve=>setTimeout(resolve,delay));window.location=url;},"finishSubmit":function(response){this.isSubmitting=false;if(response.data.captcha_question){this.captchaQuestion=response.data.captcha_question;}//Scrolltofirstalert(error-message,succes,etc.)this.$nextTick().then(()=>{letfirstAlert=this.$el.querySelector("[role=alert]");if(firstAlert!==null){$("html").animate({scrollTop:$(firstAlert).offset().top-150},"300");}});},"displaySuccessMessage":function(message){this.successMessage=message;},"handleFileInputChange":function(fieldName,event){varfiles=event.target.files||event.dataTransfer.files;if(files){if(files[0].type.match(/^image\/(gif|png|jpeg|svg\+xml)$/)||files[0].name.match(/\.(gif|png|jpe?g|svg)$/i)){varreader=newFileReader();reader.onload=e=>this.fields[fieldName].value=e.target.result;reader.readAsDataURL(files[0]);}else{this.fields[fieldName].value=files[0].name;}}}},"data":{"lang":{"general_form_error":"Theformcouldnotbesubmittedsuccessfully.Pleasetryagainlater.","form_expired_error":"Theformhasexpired.Pleasereloadthepage."},"isSubmitting":false,"generalErrors":[],"successMessage":[],"captchaQuestion":null,"fields":{"_token":{"value":"","isRequired":false,"isDisabled":false,"errors":[]},"_formID":{"value":"myManualVueForm","isRequired":false,"isDisabled":false,"errors":[]},"myManualVueFormText":{"value":null,"isRequired":false,"isDisabled":false,"errors":[]}}},"computed":{"hasErrors":function(){returnthis.fields[\'_token\'].errors.length>0||this.fields[\'_formID\'].errors.length>0||this.fields[\'myManualVueFormText\'].errors.length>0;}}});newVue({"el":"#myAutoVueForm2","methods":{"fieldHasError":function(fieldName){returnthis.fields[fieldName].errors.length>0;},"fieldHasValue":function(fieldName){returnthis.fields[fieldName].value?true:false;},"submitForm":function(){if(this.isSubmitting==false){this.isSubmitting=true;this.clearErrors();this.successMessage="";axios.post(this.$el.getAttribute("action"),newFormData(this.$el)).then((response)=>{if(response.data.redirect){this.redirect(response.data.redirect["url"],response.data.redirect["delay"]);}if(response.data.message){this.displaySuccessMessage(response.data.message);}if(response.data.reset_form){this.resetForm();}this.finishSubmit(response);}).catch((error)=>{this.handleFieldErrors(error,"submitForm");this.finishSubmit(error.response);});}},"handleFieldErrors":function(error,callingMethod){if(error.response.status==422||error.response.status==429){for(letfieldNameinerror.response.data.errors){if(typeofthis.fields[fieldName]==="undefined"){this.generalErrors=this.generalErrors.concat(error.response.data.errors[fieldName]);}else{this.fields[fieldName].errors=error.response.data.errors[fieldName];}}}elseif(error.response.status==419){this.finishSubmit(error.response);axios.get("/api/form-factory/csrf-token").then((response)=>{axios.defaults.headers.common["X-CSRF-TOKEN"]=response.data;this[callingMethod]();}).catch((error)=>{this.generalErrors=[this.lang["form_expired_error"]];});}else{this.generalErrors=[this.lang["general_form_error"]];}},"clearErrors":function(){for(letfieldNameinthis.fields){this.fields[fieldName].errors=[];}this.generalErrors=[];},"resetForm":function(){for(letfieldNameinthis.fields){this.fields[fieldName].value="";}this.clearErrors();},"redirect":asyncfunction(url,delay){awaitnewPromise(resolve=>setTimeout(resolve,delay));window.location=url;},"finishSubmit":function(response){this.isSubmitting=false;if(response.data.captcha_question){this.captchaQuestion=response.data.captcha_question;}//Scrolltofirstalert(error-message,succes,etc.)this.$nextTick().then(()=>{letfirstAlert=this.$el.querySelector("[role=alert]");if(firstAlert!==null){$("html").animate({scrollTop:$(firstAlert).offset().top-150},"300");}});},"displaySuccessMessage":function(message){this.successMessage=message;},"handleFileInputChange":function(fieldName,event){varfiles=event.target.files||event.dataTransfer.files;if(files){if(files[0].type.match(/^image\/(gif|png|jpeg|svg\+xml)$/)||files[0].name.match(/\.(gif|png|jpe?g|svg)$/i)){varreader=newFileReader();reader.onload=e=>this.fields[fieldName].value=e.target.result;reader.readAsDataURL(files[0]);}else{this.fields[fieldName].value=files[0].name;}}}},"data":{"lang":{"general_form_error":"Theformcouldnotbesubmittedsuccessfully.Pleasetryagainlater.","form_expired_error":"Theformhasexpired.Pleasereloadthepage."},"isSubmitting":false,"generalErrors":[],"successMessage":[],"captchaQuestion":null,"fields":{"_token":{"value":"","isRequired":false,"isDisabled":false,"errors":[]},"_formID":{"value":"myAutoVueForm2","isRequired":false,"isDisabled":false,"errors":[]},"myAutoVueForm2Text":{"value":null,"isRequired":false,"isDisabled":false,"errors":[]}}},"computed":{"hasErrors":function(){returnthis.fields[\'_token\'].errors.length>0||this.fields[\'_formID\'].errors.length>0||this.fields[\'myAutoVueForm2Text\'].errors.length>0;}}});',
            str_replace(["\n","\r"," "], '', $vue)
        );
    }


}